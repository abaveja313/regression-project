import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from time import sleep
from sklearn import datasets, linear_model

print "______________________________________________"
print "Running... Using Default Machine Learning Model"
print "(c) Copyright 2016, Amrit Baveja, All Rights Reserved"

def get_data(file_name):
    data = pd.read_csv(file_name)
    Y_parameter = []
    X_parameter = []
    t = None
    for i, o in zip(data['Smartphone Unit Sales'], data['PC Unit Sales (in millions)']):
        Y_parameter.append([float(i)])
        X_parameter.append([float(o)])
    return X_parameter, Y_parameter

xorx2 = raw_input('Would you like to use Y or Y^2 for this regression\n')

if str(xorx2) == "y":
    X,Y = get_data('reg-reloaded.csv')
    t = False
elif str(xorx2) == "y^2":
    X,Y = get_data('reg-sq-reloaded.csv')
    t = True
else:
    raise

x = np.array(X)
y = np.array(Y)

print "X Data: " + str(x)
sleep(1)
print "Y Data: " + str(y)
sleep(1.23)
print "----------------------------------"
print "X shape: {0}".format(str(x.shape))
sleep(2.1)
print "Y shape: {0}".format(str(y.shape))
sleep(3)
print "----------------------------------"

def linear_model_main(X_parameters,Y_parameters,predict_value):
    regr = linear_model.LinearRegression()
    regr.fit(X_parameters, Y_parameters)
    print "----------------------------------"
    print "R^2: " + str(regr.score(X_parameters, Y_parameters))
    sleep(0.4)
    print "Compatibility (R^2 * 100): " + str(regr.score(X_parameters, Y_parameters) * 100)
    print "----------------------------------"
    predict_outcome = regr.predict(predict_value)
    predictions = {}
    predictions['intercept'] = regr.intercept_
    predictions['coefficient'] = regr.coef_
    predictions['predicted_value'] = predict_outcome
    return predictions
    print "----------------------------------"

predictvalue = float(raw_input("Enter a value for [PC Unit Sales]\n")) 

if t:
    predictvalue = predictvalue * predictvalue
    print predictvalue
result = linear_model_main(x,y,predictvalue)

print "Using linear model to calculate"
sleep(0.4)
print "."
sleep(0.6)
print ".."
sleep(0.9)
print "..."
sleep(0.3)
print "-----------------------"
print "Estimated Predicted value: " + str(round(result['predicted_value'] )) + " Million"
print "-----------------------"
print "Exact Value: " + str(result['predicted_value']) + " Million"
print "---------------------------"
sleep(0.8)
print "Intercept value " + str(result["intercept"])
sleep(0.3)
print "Coefficient" + str(result["coefficient"])
sleep(0.4)
op = " + "

if int(result['intercept']) < 0:
    op = ""

ymxb = "Line equation: y = " + str(result['coefficient']) + "x" + op + str(result['intercept'])
ymxb = str(ymxb).replace('[','').replace(']','')

print ymxb
print "--------------------------"
print "If you enter a value for PC Unit Sales, the program can give you the smartphone Unit Sales"

def try_again():
    t = raw_input("Would you like to test another time using the linear model generated by this regression?\n You can also enter [see graph] to see a graph\n")
    if str(t) == "yes":
        print "----------------------------"
        predictvalue = float(raw_input("Enter a value for [PC Unit sales]\n"))
        sleep(0.5)
        print "Estimated Predicted value: " + str(round(result['predicted_value'] )) + " Million"
        print "-----------------------"
        print "Exact Value: " + str(result['predicted_value'])
        try_again()

    elif str(t) == "see graph":
        
        def show_linear_line(X_parameters,Y_parameters):
            regr = linear_model.LinearRegression()
            regr.fit(X_parameters, Y_parameters)
            plt.scatter(X_parameters,Y_parameters,color='blue')
            if str(xorx2) == "y":
                 plt.ylabel('PC Unit Sales (In Millions)')
            elif str(xorx2) == "y^2":
                 plt.ylabel('PC Unit Sales ^ 2 (In Millions)')
            else:
                raise SystemError
            plt.xlabel('Smartphone Unit Sales (In Millions)')
            plt.ylabel('PC Unit Sales (In Millions)')
            plt.title('Smartphone Unit Sales and PC Unit Sales in Millions since launch')
            plt.plot(X_parameters,regr.predict(X_parameters),color='black',linewidth=2)
            plt.margins(0.2)
            plt.subplots_adjust(bottom=0.15)
            plt.xticks(x)
            plt.yticks(y)
            plt.show()
        show_linear_line(x,y)

    elif str(t)=="no":
        quit
    else:
        raise
try_again()
